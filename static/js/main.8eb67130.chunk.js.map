{"version":3,"sources":["components/modal.js","components/movies.js","index.js"],"names":["rand","Math","round","random","getModalStyle","top","left","transform","SimpleModal","props","handleOpen","state","open","handleClose","url","setOpen","modalStyle","this","classes","Button","variant","color","onClick","Dialog","fullScreen","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","React","Component","Movies","withStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","getMovies","fetch","process","page","then","res","json","response","updateMovieList","error","setState","items","results","console","log","length","hasMore","filter","item","poster_path","map","movie","date","Date","release_date","getFullYear","newState","concat","isLoaded","message","className","main","CssBaseline","Grid","container","xs","dataLength","next","infiniteScroll","big","movieGrid","sm","md","gridItem","Card","card","CardMedia","cardMedia","image","title","CardContent","cardContent","Typography","gutterBottom","component","movieTitle","display","breakpoints","up","height","flexDirection","paddingTop","label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8eb67130.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\r\n\r\nconst useStyles = theme => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n})\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand()\r\n    const left = 50 + rand()\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    }\r\n}\r\n\r\nclass SimpleModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            url: this.props.url,\r\n            open: false,\r\n            setOpen: false,\r\n            modalStyle: getModalStyle,\r\n        }\r\n    }\r\n\r\n    handleOpen = () => {\r\n        this.state.open = true\r\n    }\r\n    handleClose = () => {\r\n        this.state.open = false\r\n    }\r\n\r\n    render() {\r\n        // getModalStyle is not a pure function, we roll the style only on the first render\r\n        const { classes } = this.props\r\n        const { url } = this.state\r\n        // const fullScreen = useMediaQuery(theme.breakpoints.down('sm'))\r\n        return (\r\n            <div>\r\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.handleOpen}>\r\n                    Open responsive dialog\r\n                </Button>\r\n                <Dialog\r\n                    fullScreen={this.state.fullScreen}\r\n                    open={this.state.open}\r\n                    onClose={this.handleClose}\r\n                    aria-labelledby=\"responsive-dialog-title\"\r\n                >\r\n                    <DialogTitle id=\"responsive-dialog-title\">{\"Use Google's location service?\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Let Google help apps determine location. This means sending anonymous location data to\r\n                            Google, even when no apps are running.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button autoFocus onClick={this.handleClose} color=\"primary\">\r\n                            Disagree\r\n                        </Button>\r\n                        <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n                            Agree\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(SimpleModal)","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport InfiniteScroll from \"react-infinite-scroll-component\"\r\nimport Fade from 'react-reveal/Fade'\r\nimport SimpleModal from './modal.js'\r\n\r\nconst useStyles = theme => ({\r\n  main: {\r\n    display: 'flex',\r\n    'background-color': '#181A1B',\r\n  },\r\n  movieGrid: {\r\n    'margin-top': '20px',\r\n    '& .MuiGrid-grid-xs-3': {\r\n      'flex-basis': '20%',\r\n    }\r\n  },\r\n  gridItem: {\r\n    'height': '600px',\r\n    [theme.breakpoints.up('lg')]: {\r\n      'flex-basis': '20%',\r\n    },\r\n    [theme.breakpoints.up('xl')]: {\r\n      'flex-basis': '14%',\r\n    },\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    border: 'solid #383D3F 1px',\r\n    'border-radius': '10px',\r\n    'background-color': '#181A1B',\r\n    '&:hover': {\r\n      'cursor': 'pointer',\r\n      'border': '5px white solid',\r\n    }\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n    height: '100%',\r\n    // 'background-size': 'contain',\r\n    'background-color': '#1C1E1F',\r\n  },\r\n  cardContent: {\r\n    // flexGrow: 1,\r\n    'background-color': '#1C1E1F',\r\n    'color': '#E8E6E3',\r\n    'max-height': '16%',\r\n  },\r\n  movieTitle: {\r\n    'line-height': '1.4',\r\n    'max-height': '75%',\r\n  },\r\n  label: {\r\n    height: '10%',\r\n    'font-family': 'Open Sans Regular,Helvetica Neue,Helvetica,Arial,sans-serif',\r\n  },\r\n  infiniteScroll: {\r\n    'margin': '0 20px',\r\n    'overflow': 'hidden !important',\r\n  }\r\n})\r\n\r\nclass Movies extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      page: 1,\r\n      items: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMovies()\r\n  }\r\n\r\n  getMovies = () => {\r\n    fetch(`https://api.themoviedb.org/3/movie/now_playing?api_key=${process.env.REACT_APP_TMDB_API_KEY}&region=us&page=${this.state.page}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (response) => this.updateMovieList(response),\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            error\r\n          })\r\n        }\r\n      )\r\n  }\r\n\r\n  updateMovieList = (response) => {\r\n    let items = response.results\r\n    console.log(items)\r\n    if (!items.length) {\r\n      this.setState({ hasMore: false })\r\n    }\r\n    items = items.filter((item) => item.poster_path)\r\n    items.map((movie) => {\r\n      let date = new Date(movie.release_date)\r\n      movie.release_date = date.getFullYear()\r\n    })\r\n\r\n    let newState = {\r\n      items: this.state.items.concat(items),\r\n    }\r\n    if (this.state.page == 1) {\r\n      newState.isLoaded = true\r\n    }\r\n    newState.page = this.state.page + 1\r\n    this.setState(newState)\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props\r\n    const { error, isLoaded, items } = this.state\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>\r\n    } else {\r\n      return (\r\n        <main className={classes.main}>\r\n          <CssBaseline />\r\n          {/* <SimpleModal /> */}\r\n          <Grid container>\r\n            {/* <Grid item xs={2}>...</Grid> */}\r\n            <Grid item xs>\r\n              <InfiniteScroll\r\n                dataLength={this.state.items.length}\r\n                next={this.getMovies}\r\n                hasMore={true}\r\n                className={classes.infiniteScroll}>\r\n                <Fade big>\r\n                  <Grid className={classes.movieGrid} spacing={2} container>\r\n                    {items.map((movie) => (\r\n                      <Grid item key={movie.id} xs={12} sm={5} md={3} className={classes.gridItem}>\r\n                        <Card className={classes.card}>\r\n                          <CardMedia\r\n                            className={classes.cardMedia}\r\n                            image={`https://image.tmdb.org/t/p/original${movie.poster_path}`}\r\n                            title={movie.title}\r\n                          />\r\n                          <CardContent className={classes.cardContent}>\r\n                            <Typography gutterBottom variant=\"subtitle1\" component=\"h2\" className={classes.movieTitle}>\r\n                              {movie.title}\r\n                            </Typography>\r\n                            <Typography variant=\"body1\" component=\"h2\">\r\n                              {movie.release_date}\r\n                            </Typography>\r\n                          </CardContent>\r\n                        </Card>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Fade>\r\n              </InfiniteScroll>\r\n            </Grid>\r\n          </Grid>\r\n        </main>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(Movies)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Movies from './components/movies';\r\n\r\nReactDOM.render(<Movies/>, document.getElementById('root'));\r\n"],"sourceRoot":""}